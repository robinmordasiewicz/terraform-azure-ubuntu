#cloud-config

package_update: true
package_upgrade: true
package_reboot_if_required: true

apt:
  sources:
    authd:
      source: ppa:ubuntu-enterprise-desktop/authd
    ansible:
      source: ppa:ansible/ansible
    hashicorp:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://apt.releases.hashicorp.com $RELEASE main
      keyserver: https://apt.releases.hashicorp.com/gpg
      keyid: AA16FCBCA621E701
    github-cli:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://cli.github.com/packages stable main
      keyserver: https://cli.github.com/packages/githubcli-archive-keyring.gpg
      keyid: 23F3D4EA75716059
    azure-cli:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packages.microsoft.com/repos/azure-cli/ $RELEASE main
      keyserver: https://packages.microsoft.com/keys/microsoft.asc
      keyid: EB3E94ADBE1229CF
    google-cloud-sdk:
      source: deb [arch=amd64 signed-by=$KEY_FILE] http://packages.cloud.google.com/apt cloud-sdk main
      keyserver: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      keyid: C0BA5CE6DC6315A3
    google-chrome:
      source: deb [arch=amd64 signed-by=$KEY_FILE] http://dl.google.com/linux/chrome/deb/ stable main
      keyserver: https://dl-ssl.google.com/linux/linux_signing_key.pub
      keyid: 7721F63BD38B4796
    speedtest-cli:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packagecloud.io/ookla/speedtest-cli/ubuntu/ jammy main
      keyserver: https://packagecloud.io/ookla/speedtest-cli/gpgkey
      keyid: 31EB3981E723ACAA
    docker:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://download.docker.com/linux/ubuntu noble stable
      keyserver: https://download.docker.com/linux/ubuntu/gpg
      keyid: 8D81803C0EBFCD88

debconf_selections:
  mscorefonts-eula: |
    ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true
    ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula seen true

packages:
  - alsa-utils
  - ansible
  - apache2-utils
  - apparmor
  - apt-transport-https
  - asciidoctor
  - authd
  - autoconf
  - azure-cli
  - bash-completion
  - bat
  - ca-certificates
  - cockpit
  - cmake
  - curl
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - docker-compose-plugin
  - docker-ce-rootless-extras
  - docker-buildx-plugin
  - dos2unix
  - dpkg
  - dpkg-dev
  - dnsutils
  - ffmpeg
  - file
  - fontconfig
  - fonts-powerline
  - frei0r-plugins
  - fuse3
  - fzf
  - gh
  - gnupg
  - graphviz
  - gstreamer1.0-plugins-base
  - gstreamer1.0-plugins-good
  - gstreamer1.0-plugins-bad
  - gstreamer1.0-plugins-ugly
  - google-cloud-cli
  - google-chrome-stable
  - imagemagick
  - inkscape
  - iputils-ping
  - ladspa-sdk
  - libapache2-mod-php
  - libavif-dev
  - libfuse3-3
  - libgstreamer1.0-0
  - libappindicator3-1
  - libdbusmenu-glib4
  - libdbusmenu-gtk3-4
  - libfftw3-bin
  - libfftw3-dev
  - libfftw3-long3
  - libfftw3-quad3
  - libfftw3-single3
  - libfuse2
  - libfuse2t64
  - libgavl2
  - libgl1-mesa-dri
  - libgl1
  - libgif-dev
  - libglu1-mesa
  - libmovit-dev
  - libnotify4
  - libpoppler-cpp-dev
  - libsecret-1-0
  - libsecret-1-dev
  - libsecret-common
  - libsox-fmt-all
  - libglx-mesa0
  - libvulkan1
  - libvidstab-dev
  - libyelp-dev
  - locales
  - locales-all
  - lsb-release
  - lsd
  - melt
  - mesa-utils
  - mesa-utils-bin
  - mesa-vulkan-drivers
  - mtr
  - nmap
  - npm
  - php
  - php-cli
  - php-cgi
  - php-mysql
  - php-pgsql
  - python3-full
  - python3-pip
  - skopeo
  - snapd
  - software-properties-common
  - squashfs-tools
  - swh-plugins
  - sox
  - speedtest
  - sqlite3
  - terraform
  - tesseract-ocr
  - tcpdump
  - tofrodos
  - ubuntu-restricted-extras
  - ubuntu-drivers-common
  - unzip
  - vlc
  - xdg-utils
  - yamllint
  - yelp-tools
  - zsh

snap:
  commands:
    01: ['install', 'authd-msentraid']
    02: ['install', 'shfmt']

disk_setup:
  /dev/disk/azure/scsi1/lun0:
    table_type: gpt
    layout: true
    overwrite: false
  /dev/disk/azure/scsi1/lun1:
    table_type: gpt
    layout: true
    overwrite: false

fs_setup:
  - label: home
    filesystem: ext4
    device: /dev/disk/azure/scsi1/lun0
    partition: auto
  - label: docker
    filesystem: ext4
    device: /dev/disk/azure/scsi1/lun1
    partition: auto

mounts:
  - ["/dev/disk/azure/scsi1/lun0", "/home", "ext4", "defaults,nofail", "0", "2"]
  - ["/dev/disk/azure/scsi1/lun1", "/var/lib/docker", "ext4", "defaults", "0", "2"]

write_files:
  - path: /root/.tmux.conf
    content: |
      set -g default-terminal "screen-256color"
      set -g @plugin 'khanghh/tmux-dark-plus-theme'
      set -g @plugin 'tmux-plugins/tpm'
      set -g @plugin 'tmux-plugins/tmux-sensible'
      # VSCode colors for tmux
      set -g window-active-style 'bg=colour235,fg=colour253'
      set -g window-style 'bg=colour235,fg=colour253'
      set -g pane-border-style 'bg=colour235, fg=colour59'
      set -g pane-active-border-style 'bg=colour235, fg=colour59'
      set -g status-style 'bg=colour32, fg=colour15'
      set -g window-status-style 'bg=default, fg=default'
      set -g window-status-current-style 'bg=colour39, fg=default'
      # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
      run '~/.tmux/plugins/tpm/tpm'
  - path: /etc/ssh/sshd_config.d/custom.conf
    content: |
      UsePAM yes
      KbdInteractiveAuthentication yes
      PrintMotd no
  - path: /root/.lacework.toml
    content: |
      [default]
        account = "partner-demo"
        subaccount = "fortinetcanadademo"
        api_key = "FORTINET_A58D01E047E6BCEAB33F5DC15E83614EC845B6A8E05C3A4"
        api_secret = "_55a65f52518be3a4de173d5bc5829f29"
        version = 2
  - path: /etc/skel/.lacework.toml
    content: |
      [default]
        account = "partner-demo"
        subaccount = "fortinetcanadademo"
        api_key = "FORTINET_A58D01E047E6BCEAB33F5DC15E83614EC845B6A8E05C3A4"
        api_secret = "_55a65f52518be3a4de173d5bc5829f29"
        version = 2
  # - path: /tmp/broker.conf.testing
  #   content: |
  #     [oidc]
  #     issuer = "https://login.microsoftonline.com/${VAR-Directory-tenant-ID}/v2.0"
  #     client_id = "${VAR-Directory-client-ID}"
  #     [users]
  #     allowed_users = ALL
  #     ssh_allowed_suffixes = @fortinet-us.com

runcmd:
  - useradd -D -s "$(which zsh)"
  - sed -i -E 's|^#?DSHELL=.*|DSHELL=/usr/bin/zsh|' /etc/adduser.conf
  - |
    sed -i \
    -e 's|issuer = https://login.microsoftonline.com/<ISSUER_ID>/v2.0|issuer = "https://login.microsoftonline.com/${VAR-Directory-tenant-ID}/v2.0"|' \
    -e 's|client_id = <CLIENT_ID>|client_id = "${VAR-Directory-client-ID}"|' \
    /var/snap/authd-msentraid/current/broker.conf
  - sed -i 's/^#allowed_users = OWNER$/allowed_users = ALL/' /var/snap/authd-msentraid/current/broker.conf
  - echo 'ssh_allowed_suffixes = @fortinet-us.com' >> /var/snap/authd-msentraid/current/broker.conf
  - sed -i 's/^\(LOGIN_TIMEOUT\t\t\)[0-9]\+/\1360/' /etc/login.defs
  - mkdir -p /etc/authd/brokers.d/
  - cp /snap/authd-msentraid/current/conf/authd/msentraid.conf /etc/authd/brokers.d/msentraid.conf
  - snap restart authd-msentraid
  - systemctl restart authd
  - systemctl restart ssh
  - mkdir -p /root/.tmux/plugins && git clone https://github.com/tmux-plugins/tpm /root/.tmux/plugins/tpm && cp -a /root/.tmux /etc/skel/.tmux && cp /root/.tmux.conf /etc/skel/.tmux.conf
  - python3 -m pip install --break-system-packages --ignore-installed aider-chat ansible ansible-creator ansible-dev-environment azure-cognitiveservices-speech docs-chat-bot fastapi git-filter-repo google-api-python-client markitdown mkdocs-add-teaser mkdocs-awesome-pages-plugin mkdocs-childpages-card-grid-plugin mkdocs-enumerate-headings-plugin mkdocs-exclude mkdocs-git-authors-plugin mkdocs-git-committers-plugin-2 mkdocs-github-admonitions-plugin mkdocs-git-revision-date-localized-plugin mkdocs-glightbox mkdocs-literate-nav mkdocs-material 'mkdocs-material[imaging]' mkdocs-minify-plugin mkdocs-monorepo-plugin mkdocs-pdf-export-plugin mkdocs-same-dir mkdocs-section-index mkdocs-table-reader-plugin mkdocs-with-pdf 'mkdocstrings[crystal]' 'mkdocstrings[python]' oauth2client oterm playwright progressbar2 pydantic pytest-playwright uvicorn powerline-shell
  - mkdir -p "/usr/share/fonts/powerline" && curl -L https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf -o /usr/share/fonts/powerline/PowerlineSymbols.otf && mkdir -p /etc/fonts/conf.avail && curl -L https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf -o /etc/fonts/conf.avail/10-powerline-symbols.conf && fc-cache -f /usr/share/fonts
  - curl -s https://ohmyposh.dev/install.sh | bash -s -- -d /usr/local/bin -t /usr/local/share/oh-my-posh && curl -L -o /usr/local/share/oh-my-posh/powerlevel10k.omp.json https://raw.githubusercontent.com/amerintxperts/dotfiles/main/powerlevel10k.omp.json && oh-my-posh disable notice
  - mkdir -p /root/.oh-my-posh/themes/
  - curl https://raw.githubusercontent.com/amerintlxperts/dotfiles/refs/heads/main/powerlevel10k.omp.json -o /root/.oh-my-posh/themes/powerlevel10k.omp.json
  - oh-my-posh font install Meslo
  - cp -a /root/.oh-my-posh /etc/skel/.oh-my-posh
  # - bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)" --unattended
  - cp -a /root/.oh-my-bash /etc/skel/.oh-my-bash
  - echo 'eval "$(oh-my-posh init bash --config $HOME/.oh-my-posh/themes/powerlevel10k.omp.json)"' >> /root/.bashrc
  - export HOME=/root && curl https://raw.githubusercontent.com/lacework/go-sdk/main/cli/install.sh | bash -s --
  - echo 'source <(lacework completion bash)' >> /root/.bashrc
  - echo 'alias ls=lsd' >> /root/.bashrc
  - sed -i "s#^export OSH='/root/\.oh-my-bash'#export OSH=\"\$HOME/.oh-my-bash\"#" /etc/skel/.bashrc
  - echo 'export OLLAMA_API_BASE=http://127.0.0.1:11434' >> /root/.bashrc
  - cp /root/.bashrc /etc/skel/.bashrc
  - lacework component install sca
  - lacework component install iac
  - lacework component install remediate
  - lacework component install vuln-scanner
  - mkdir -p /etc/skel/.config
  - ls -al /root/.config
  - cp -a /root/.config/lacework/ /etc/skel/.config/lacework/
  - curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
  - touch /etc/skel/.hushlogin && touch /root/.hushlogin
  - |
    git clone --depth=1 https://github.com/tfutils/tfenv.git /root/.tfenv
    /root/.tfenv/bin/tfenv init
    /root/.tfenv/bin/tfenv install
    /root/.tfenv/bin/tfenv use
    cp -a /root/.tfenv /etc/skel/.tfenv
  - export HOME=/root/.ollama && curl -fsSL https://ollama.com/install.sh | sh
  - systemctl start ollama.service
  - systemctl enable ollama.service
  - ollama pull deepseek-r1:latest
  - curl -s https://fluxcd.io/install.sh | bash
  - . /etc/os-release && curl -fsSL "https://packages.microsoft.com/config/ubuntu/$VERSION_ID/packages-microsoft-prod.deb" -o /tmp/packages-microsoft-prod.deb
  - [bash, -lc, "export DEBIAN_FRONTEND=noninteractive APT_LISTCHANGES_FRONTEND=none && dpkg -i /tmp/packages-microsoft-prod.deb"]
  - rm -f /tmp/packages-microsoft-prod.deb
  - apt-get update
  - apt-get install -y powershell
  - export HOME=/root && sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  - sed -i 's/^plugins=.*$/plugins=(git zsh-syntax-highlighting zsh-autosuggestions ubuntu jsontools gh common-aliases conda-zsh-completion zsh-aliases-lsd zsh-tfenv z pip docker)/' /root/.zshrc
  - echo 'eval "$(oh-my-posh init zsh --config $HOME/.oh-my-posh/themes/powerlevel10k.omp.json)"' >> /root/.zshrc
  - echo 'export OLLAMA_API_BASE=http://127.0.0.1:11434' >> /root/.zshrc
  - cp /root/.zshrc /etc/skel/.zshrc
  - mkdir -p /root/.oh-my-zsh/custom/plugins
  - git clone https://github.com/zsh-users/zsh-autosuggestions.git /root/.oh-my-zsh/custom/plugins/zsh-autosuggestions
  - git clone https://github.com/zsh-users/zsh-syntax-highlighting.git /root/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
  - git clone https://github.com/conda-incubator/conda-zsh-completion.git /root/.oh-my-zsh/custom/plugins/conda-zsh-completion
  - git clone https://github.com/cda0/zsh-tfenv.git /root/.oh-my-zsh/custom/plugins/zsh-tfenv
  - git clone https://github.com/yuhonas/zsh-aliases-lsd.git /root/.oh-my-zsh/custom/plugins/zsh-aliases-lsd
  - curl -L https://raw.githubusercontent.com/Azure/azure-cli/dev/az.completion -o /root/.oh-my-zsh/custom/az.zsh
  - cp -a /root/.oh-my-zsh /etc/skel/.oh-my-zsh
  - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  - install -o root -g root -m 0755 kubectl /usr/bin/kubectl
  - curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash -s -- -b /usr/local/bin
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
  - unzip -q /tmp/awscliv2.zip -d /tmp
  - /tmp/aws/install
  - rm -rf /tmp/aws /tmp/awscliv2.zip
  - ansible-galaxy collection install fortinet.console fortinet.fortiadc fortinet.fortianalyzer fortinet.fortiflexvm fortinet.fortimanager fortinet.fortios fortinet.fortiswitch fortinet.fortiweb
  - export NVM_DIR="/usr/bin/nvm" && git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR" && \. "$NVM_DIR/nvm.sh" && nvm install node
  - npm install -g '@devcontainers/cli'
  - npm install -g bash-language-server cwebp dockerfile-language-server-nodejs eslint eslint-config-prettier gatsby-cli javascript-typescript-langserver jsonlint newman prettier puppeteer setup-eslint-config sql-language-server stylelint-config-prettier svgo unified-language-server vscode-css-languageserver-bin vscode-html-languageserver-bin vscode-json-languageserver-bin yaml-language-server
  - mkdir /etc/skel/GIT
  - |
    mkdir -p /etc/skel/GIT/.devcontainer
    cat <<'EOF' > /etc/skel/GIT/.devcontainer/devcontainer.json
    {
      "image": "ghcr.io/amerintlxperts/devcontainer:latest",
      "initializeCommand": "docker pull ghcr.io/amerintlxperts/devcontainer:latest",
      "runArgs": [
        "--hostname=devcontainer"
      ]
    }
    EOF
  - mkdir -p /etc/skel/GIT/fortinet
  - mkdir -p /etc/skel/GIT/40docs
  - mkdir -p /etc/skel/GIT/lacework-dev
  - git clone https://github.com/lacework-dev/scripts.git /etc/skel/GIT/lacework-dev/scripts
  - git clone https://github.com/fortinet/fortigate-terraform-deploy.git /etc/skel/GIT/fortinet/fortigate-terraform-deploy
  - git clone https://github.com/40docs/infrastructure.git /etc/skel/GIT/40docs/infrastructure
  - git clone https://github.com/40docs/docs_forticnapp_code_security.git /etc/skel/GIT/40docs/docs_forticnapp_code_security
  - git clone https://github.com/40docs/manifests-applications.git /etc/skel/GIT/40docs/manifests-applications
  - git clone https://github.com/40docs/hydration.git /etc/skel/GIT/40docs/hydration
  - echo '+nostats +nocomments +nocmd +noquestion +recurse +search' > /root/.digrc && cp /root/.digrc /etc/skel/.digrc
  - curl https://raw.githubusercontent.com/amerintlxperts/dotfiles/refs/heads/main/.p10k.zsh -o /root/.p10k.zsh && cp /root/.p10k.zsh /etc/skel/.p10k.zsh
  - curl https://raw.githubusercontent.com/amerintlxperts/dotfiles/refs/heads/main/.vimrc -o /root/.vimrc && cp /root/.vimrc /etc/skel/.vimrc
  - mkdir -p /root/.vim/pack/plugin/start
  - git clone https://github.com/vim-airline/vim-airline /root/.vim/pack/plugin/start/vim-airline
  - git clone https://github.com/preservim/nerdtree.git /root/.vim/pack/plugin/start/nerdtree
  - git clone https://github.com/junegunn/fzf.vim.git /root/.vim/pack/plugin/start/fzf
  - git clone https://github.com/airblade/vim-gitgutter.git /root/.vim/pack/plugin/start/vim-gitgutter
  - git clone https://github.com/tpope/vim-fugitive.git /root/.vim/pack/plugin/start/vim-fugitive
  - git clone --depth 1 https://github.com/sheerun/vim-polyglot /root/.vim/pack/plugin/start/vim-polyglot
  - git clone https://github.com/hashivim/vim-terraform.git /root/.vim/pack/plugin/start/vim-terraform
  - mkdir -p /root/.vim/pack/themes/start
  - git clone https://github.com/tomasiser/vim-code-dark /root/.vim/pack/themes/start/vim-code-dark
  - cp -a /root/.vim /etc/skel
  - curl -L https://raw.githubusercontent.com/rupa/z/master/z.sh -o /root/.z && cp /root/.z /etc/skel/.z
  - usermod -aG docker vscode
  - service apache2 stop
  - systemctl disable apache2
  - export HOME="/root" && curl -fsSL https://coder.com/install.sh | sh -s -- && usermod -aG docker coder && echo 'CODER_HTTP_ADDRESS=0.0.0.0:80' > /etc/coder.d/coder.env && systemctl enable --now coder && journalctl -u coder.service -b && rm -rf "/root/.cache/coder/"
  - fwupdmgr update -y --no-reboot-check
  - |
    echo "Checking if reboot is required..."
    if [ -f /var/run/reboot-required ]; then
      echo "Reboot required. Initiating reboot..."
      reboot
    else
      echo "No reboot required."
    fi
