#cloud-config

package_update: true
package_upgrade: true
package_reboot_if_required: true

ssh_deletekeys: false
ssh_keys:
  rsa_private: |
    ${indent(4, VAR_ssh_host_rsa_private)}
  rsa_public: |
    ${indent(4, VAR_ssh_host_rsa_public)}
  ecdsa_private: |
    ${indent(4, VAR_ssh_host_ecdsa_private)}
  ecdsa_public: |
    ${indent(4, VAR_ssh_host_ecdsa_public)}
  ed25519_private: |
    ${indent(4, VAR_ssh_host_ed25519_private)}
  ed25519_public: |
    ${indent(4, VAR_ssh_host_ed25519_public)}

apt:
  sources:
    authd:
      source: ppa:ubuntu-enterprise-desktop/authd
    dotnet:
      source: ppa:dotnet/backports
    ansible:
      source: ppa:ansible/ansible
    nvtop:
      source: ppa:quentiumyt/nvtop
    helm:
      source: deb [arch=$(dpkg --print-architecture) signed-by=$KEY_FILE] https://baltocdn.com/helm/stable/debian/ all main
      keserver: https://baltocdn.com/helm/signing.asc
    trivy:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main
      keserver: https://aquasecurity.github.io/trivy-repo/deb/public.key
    hashicorp:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://apt.releases.hashicorp.com $RELEASE main
      keyserver: https://apt.releases.hashicorp.com/gpg
      keyid: AA16FCBCA621E701
    github-cli:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://cli.github.com/packages stable main
      keyserver: https://cli.github.com/packages/githubcli-archive-keyring.gpg
      keyid: 23F3D4EA75716059
    azure-cli:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packages.microsoft.com/repos/azure-cli/ $RELEASE main
      keyserver: https://packages.microsoft.com/keys/microsoft.asc
      keyid: EB3E94ADBE1229CF
    google-cloud-sdk:
      source: deb [arch=amd64 signed-by=$KEY_FILE] http://packages.cloud.google.com/apt cloud-sdk main
      keyserver: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      keyid: C0BA5CE6DC6315A3
    google-chrome:
      source: deb [arch=amd64 signed-by=$KEY_FILE] http://dl.google.com/linux/chrome/deb/ stable main
      keyserver: https://dl-ssl.google.com/linux/linux_signing_key.pub
      keyid: 7721F63BD38B4796
    docker:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://download.docker.com/linux/ubuntu noble stable
      keyserver: https://download.docker.com/linux/ubuntu/gpg
      keyid: 8D81803C0EBFCD88

packages:
  - alsa-utils
  - ansible
  - apache2-utils
  - apparmor
  - apt-transport-https
  - asciidoctor
  - aspnetcore-runtime-9.0
  - autoconf
  - azure-cli
  - bash-completion
  - bat
  - build-essential
  - cabextract
  - ca-certificates
  - cockpit
  - cmake
  - curl
  - dos2unix
  - dotnet-sdk-9.0
  - dpkg
  - dpkg-dev
  - dnsutils
  - ffmpeg
  - file
  - fontconfig
  - fonts-powerline
  - frei0r-plugins
  - fuse3
  - fzf
  - g++
  - gh
  - gnupg
  - graphviz
  - gstreamer1.0-libav
  - gstreamer1.0-vaapi
  - gstreamer1.0-plugins-base
  - gstreamer1.0-plugins-good
  - gstreamer1.0-plugins-bad
  - gstreamer1.0-plugins-ugly
  - google-cloud-cli
  - google-chrome-stable
  - helm
  - imagemagick
  - inkscape
  - iputils-ping
  - ladspa-sdk
  - libapache2-mod-php
  - libavif-dev
  - libc6
  - libfuse3-3
  - libgcc-s1
  - libgstreamer1.0-0
  - libicu74
  - liblttng-ust1t64
  - libappindicator3-1
  - libdbusmenu-glib4
  - libdbusmenu-gtk3-4
  - libfftw3-bin
  - libfftw3-dev
  - libfftw3-long3
  - libfftw3-quad3
  - libfftw3-single3
  - libfuse2t64
  - libgavl2
  - libgl1-mesa-dri
  - libgl1
  - libgif-dev
  - libglu1-mesa
  - libmovit-dev
  - libnotify4
  - libpoppler-cpp-dev
  - librust-gdk-pixbuf-sys-dev
  - libsecret-1-0
  - libsecret-1-dev
  - libsecret-common
  - libsox-fmt-all
  - libstdc++6
  - libssl3t64
  - libslirp0
  - libglx-mesa0
  - libunwind8
  - libvulkan1
  - libvidstab-dev
  - libyelp-dev
  - locales
  - locales-all
  - lsb-release
  - lsd
  - make
  - melt
  - mesa-utils
  - mesa-utils-bin
  - mesa-vulkan-drivers
  - mtr
  - nmap
  - npm
  - nvtop
  - php
  - php-cli
  - php-cgi
  - php-mysql
  - php-pgsql
  - pigz
  - pkg-config
  - postgresql
  - postgresql-contrib
  - poppler-utils
  - python3-full
  - python3-pip
  - python3-venv
  - shellcheck
  - skopeo
  - slirp4netns
  - snapd
  - software-properties-common
  - squashfs-tools
  - swh-plugins
  - sox
  - sqlite3
  - terraform
  - tesseract-ocr
  - tcpdump
  - tofrodos
  - trivy
  - ubuntu-drivers-common
  - unzip
  - vlc
  - xdg-utils
  - yq
  - yamllint
  - yelp-tools
  - zsh
  - zlib1g

snap:
  commands:
    01: ['install', 'go', '--classic']
    02: ['install', 'shfmt']

write_files:
  - path: /etc/profile.d/nvm.sh
    owner: root:root
    permissions: '0644'
    content: |
      export NVM_DIR=/usr/local/nvm
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  - path: /root/.tmux.conf
    content: |
      set -g default-terminal "screen-256color"
      set -g @plugin 'khanghh/tmux-dark-plus-theme'
      set -g @plugin 'tmux-plugins/tpm'
      set -g @plugin 'tmux-plugins/tmux-sensible'
      set -g window-active-style 'bg=colour235,fg=colour253'
      set -g window-style 'bg=colour235,fg=colour253'
      set -g pane-border-style 'bg=colour235, fg=colour59'
      set -g pane-active-border-style 'bg=colour235, fg=colour59'
      set -g status-style 'bg=colour32, fg=colour15'
      set -g window-status-style 'bg=default, fg=default'
      set -g window-status-current-style 'bg=colour39, fg=default'
      run '~/.tmux/plugins/tpm/tpm'
  - path: /etc/ssh/sshd_config.d/custom.conf
    content: |
      UsePAM yes
      KbdInteractiveAuthentication yes
      PrintMotd no
  - path: /root/.lacework.toml
    content: |
      [default]
        account = "${VAR_Forticnapp_account}"
        subaccount = "${VAR_Forticnapp_subaccount}"
        api_key = "${VAR_Forticnapp_api_key}"
        api_secret = "${VAR_Forticnapp_api_secret}"
        version = 2
  - path: /etc/skel/.lacework.toml
    content: |
      [default]
        account = "${VAR_Forticnapp_account}"
        subaccount = "${VAR_Forticnapp_subaccount}"
        api_key = "${VAR_Forticnapp_api_key}"
        api_secret = "${VAR_Forticnapp_api_secret}"
        version = 2
  - path: /root/npm-install.sh
    content: |
      #!/bin/bash
      set -eux
      export NVM_DIR=/usr/local/nvm
      mkdir -p "$NVM_DIR"
      git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
      . "$NVM_DIR/nvm.sh"
      if [ -f /root/.npmrc ]; then
        mv /root/.npmrc /root/.npmrc.bak
      fi
      nvm install node
      nvm alias default node
      nvm use default --delete-prefix
      npm config set prefix /usr/local
      npm config set loglevel verbose
      npm install --location=global --no-save @devcontainers/cli
      npm install --location=global markdownlint-cli2 bash-language-server cwebp dockerfile-language-server-nodejs eslint eslint-config-prettier gatsby-cli javascript-typescript-langserver jsonlint newman prettier puppeteer setup-eslint-config sql-language-server stylelint-config-prettier svgo unified-language-server vscode-css-languageserver-bin vscode-html-languageserver-bin vscode-json-languageserver-bin yaml-language-server --no-save
      CXXFLAGS="--std=gnu++20" npm install --location=global terminalizer --no-save
      OS=$(go env GOOS); ARCH=$(go env GOARCH); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_$${OS}_$${ARCH}
      chmod +x cmctl
      sudo mv cmctl /usr/local/bin
  # - path: /tmp/broker.conf.testing
  #   content: |
  #     [oidc]
  #     issuer = "https://login.microsoftonline.com/${VAR_Directory_tenant_ID}/v2.0"
  #     client_id = "${VAR_Directory_client_ID}"
  #     [users]
  #     allowed_users = ALL
  #     ssh_allowed_suffixes = @fortinet-us.com

runcmd:
  - echo "runcmd executed at $(date)"
  - |
    DEV=/dev/disk/azure/scsi1/lun0
    if ! blkid -s TYPE "$DEV" >/dev/null 2>&1; then
      mkfs.ext4 -F "$DEV"
    fi
  - echo '/dev/disk/azure/scsi1/lun0 /home       ext4 defaults,nofail 0 2' >> /etc/fstab
  - 'mountpoint -q /home || mount /dev/disk/azure/scsi1/lun0 /home'
  - '[ -d /var/lib/authd ] || mkdir -p /var/lib/authd'
  - |
    DEV=/dev/disk/azure/scsi1/lun1
    if ! blkid -s TYPE "$DEV" >/dev/null 2>&1; then
      mkfs.ext4 -F "$DEV"
    fi
  - echo '/dev/disk/azure/scsi1/lun1 /var/lib/authd       ext4 defaults,nofail 0 2' >> /etc/fstab
  - 'mountpoint -q /var/lib/authd || mount /dev/disk/azure/scsi1/lun1 /var/lib/authd'
  - 'DEBIAN_FRONTEND=noninteractive apt-get install -y authd'
  - snap install authd-msentraid
  - |
    sed -i \
    -e 's|issuer = https://login.microsoftonline.com/<ISSUER_ID>/v2.0|issuer = "https://login.microsoftonline.com/${VAR_Directory_tenant_ID}/v2.0"|' \
    -e 's|client_id = <CLIENT_ID>|client_id = "${VAR_Directory_client_ID}"|' \
    /var/snap/authd-msentraid/current/broker.conf
  - sed -i 's/^#allowed_users = OWNER$/allowed_users = ALL/' /var/snap/authd-msentraid/current/broker.conf
  - echo 'ssh_allowed_suffixes = @fortinet-us.com' >> /var/snap/authd-msentraid/current/broker.conf
  - sed -i 's/^\(LOGIN_TIMEOUT\t\t\)[0-9]\+/\1360/' /etc/login.defs
  - mkdir -p /etc/authd/brokers.d/
  - cp /snap/authd-msentraid/current/conf/authd/msentraid.conf /etc/authd/brokers.d/msentraid.conf
  - snap restart authd-msentraid
  - |
    mkdir -p /etc/systemd/system/authd.socket.d
    cat <<EOF >/etc/systemd/system/authd.socket.d/override.conf
    [Install]
    WantedBy=multi-user.target
    EOF
  - systemctl daemon-reload
  - systemctl enable --now authd.socket
  - systemctl restart authd
  - systemctl restart ssh
  - useradd -D -s "$(which zsh)"
  - sed -i -E 's|^#?DSHELL=.*|DSHELL=/usr/bin/zsh|' /etc/adduser.conf
  - [ sh, -xc, "echo 'ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true' | debconf-set-selections" ]
  - [ sh, -xc, "DEBIAN_FRONTEND=noninteractive apt-get update -qq" ]
  - DEBIAN_FRONTEND=noninteractive apt-get full-upgrade -y
  - [ sh, -xc, "DEBIAN_FRONTEND=noninteractive apt-get install -y ttf-mscorefonts-installer ubuntu-restricted-extras libavcodec-extra libavcodec-extra60 ubuntu-restricted-addons unrar" ]
  - mkdir -p /root/.tmux/plugins && git clone https://github.com/tmux-plugins/tpm /root/.tmux/plugins/tpm && cp -a /root/.tmux /etc/skel/.tmux && cp /root/.tmux.conf /etc/skel/.tmux.conf
  - python3 -m pip install --break-system-packages --ignore-installed aider-install ansible ansible-dev-tools ansible-creator ansible-dev-environment azure-cognitiveservices-speech black checkov docs-chat-bot fastapi gitlint git-filter-repo google-api-python-client qrcode[pil] markitdown mkdocs-add-teaser mkdocs-awesome-pages-plugin mkdocs-childpages-card-grid-plugin mkdocs-enumerate-headings-plugin mkdocs-exclude mkdocs-git-authors-plugin mkdocs-git-committers-plugin-2 mkdocs-github-admonitions-plugin mkdocs-git-revision-date-localized-plugin mkdocs-glightbox mkdocs-literate-nav mkdocs-material 'mkdocs-material[imaging]' mkdocs-minify-plugin mkdocs-monorepo-plugin mkdocs-pdf-export-plugin mkdocs-same-dir mkdocs-section-index mkdocs-table-reader-plugin mkdocs-with-pdf 'mkdocstrings[crystal]' 'mkdocstrings[python]' oauth2client oterm playwright pre-commit progressbar2 pydantic pytest-playwright uvicorn powerline-shell
  - mkdir -p "/usr/share/fonts/powerline" && curl -L https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf -o /usr/share/fonts/powerline/PowerlineSymbols.otf && mkdir -p /etc/fonts/conf.avail && curl -L https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf -o /etc/fonts/conf.avail/10-powerline-symbols.conf && fc-cache -f /usr/share/fonts
  - mkdir -p /etc/skel/.cache/
  - playwright install --with-deps chromium && cp -a /root/.cache/ms-playwright /etc/skel/.cache/ms-playwright
  - curl -s https://ohmyposh.dev/install.sh | bash -s -- -d /usr/local/bin -t /usr/local/share/oh-my-posh && curl -L -o /usr/local/share/oh-my-posh/powerlevel10k.omp.json https://raw.githubusercontent.com/amerintxperts/dotfiles/main/powerlevel10k.omp.json && oh-my-posh disable notice
  - mkdir -p /root/.oh-my-posh/themes/
  - curl https://raw.githubusercontent.com/amerintlxperts/dotfiles/refs/heads/main/powerlevel10k.omp.json -o /root/.oh-my-posh/themes/powerlevel10k.omp.json
  - oh-my-posh font install Meslo
  - cp -a /root/.oh-my-posh /etc/skel/.oh-my-posh
  #- bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)" --unattended
  #- cp -a /root/.oh-my-bash /etc/skel/.oh-my-bash
  - echo 'eval "$(oh-my-posh init bash --config $HOME/.oh-my-posh/themes/powerlevel10k.omp.json)"' >> /root/.bashrc
  - export HOME=/root && curl https://raw.githubusercontent.com/lacework/go-sdk/main/cli/install.sh | bash -s --
  - echo 'source <(lacework completion bash)' >> /root/.bashrc
  - echo 'alias ls=lsd' >> /root/.bashrc
  - echo 'export OLLAMA_API_BASE=http://127.0.0.1:11434' >> /root/.bashrc
  #- sed -i '/^export OSH=/c\export OSH=~/.oh-my-bash' /etc/skel/.bashrc
  - lacework component install sca
  - lacework component install iac
  - lacework component install remediate
  - lacework component install vuln-scanner
  - mkdir -p /etc/skel/.config
  - ls -al /root/.config
  - cp -a /root/.config/lacework/ /etc/skel/.config/lacework/
  - curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
  - touch /etc/skel/.hushlogin && touch /root/.hushlogin
  - |
    git clone --depth=1 https://github.com/tfutils/tfenv.git /root/.tfenv
    /root/.tfenv/bin/tfenv init
    /root/.tfenv/bin/tfenv install
    /root/.tfenv/bin/tfenv use
    cp -a /root/.tfenv /etc/skel/.tfenv
  - |
    DEV=/dev/disk/azure/scsi1/lun3
    if ! blkid -s TYPE "$DEV" >/dev/null 2>&1; then
      mkfs.ext4 -F "$DEV"
    fi
  - mkdir -p /root/.ollama
  - echo '/dev/disk/azure/scsi1/lun3 /root/.ollama       ext4 defaults,nofail 0 2' >> /etc/fstab
  - 'mountpoint -q /root/.ollama || mount /dev/disk/azure/scsi1/lun3 /root/.ollama'
  - export HOME=/root/.ollama && curl -fsSL https://ollama.com/install.sh | sh
  - systemctl start ollama.service
  - systemctl enable ollama.service
  - ollama pull deepseek-r1:latest
  - curl -s https://fluxcd.io/install.sh | bash
  - . /etc/os-release && curl -fsSL "https://packages.microsoft.com/config/ubuntu/$VERSION_ID/packages-microsoft-prod.deb" -o /tmp/packages-microsoft-prod.deb
  - [bash, -lc, "export DEBIAN_FRONTEND=noninteractive APT_LISTCHANGES_FRONTEND=none && dpkg -i /tmp/packages-microsoft-prod.deb"]
  - rm -f /tmp/packages-microsoft-prod.deb
  - apt-add-repository https://packages.microsoft.com/ubuntu/24.04/prod
  - apt-get update
  - apt-get install -y powershell aztfexport
  - export HOME=/root && sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  - sed -i 's/^plugins=.*$/plugins=(git zsh-syntax-highlighting zsh-autosuggestions ubuntu jsontools gh common-aliases conda-zsh-completion zsh-aliases-lsd zsh-tfenv z pip docker)/' /root/.zshrc
  - echo 'eval "$(oh-my-posh init zsh --config $HOME/.oh-my-posh/themes/powerlevel10k.omp.json)"' >> /root/.zshrc
  - echo 'export OLLAMA_API_BASE=http://127.0.0.1:11434' >> /root/.zshrc
  - cp /root/.zshrc /etc/skel/.zshrc
  - mkdir -p /root/.oh-my-zsh/custom/plugins
  - git clone https://github.com/zsh-users/zsh-autosuggestions.git /root/.oh-my-zsh/custom/plugins/zsh-autosuggestions
  - git clone https://github.com/zsh-users/zsh-syntax-highlighting.git /root/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
  - git clone https://github.com/conda-incubator/conda-zsh-completion.git /root/.oh-my-zsh/custom/plugins/conda-zsh-completion
  - git clone https://github.com/cda0/zsh-tfenv.git /root/.oh-my-zsh/custom/plugins/zsh-tfenv
  - git clone https://github.com/yuhonas/zsh-aliases-lsd.git /root/.oh-my-zsh/custom/plugins/zsh-aliases-lsd
  - curl -L https://raw.githubusercontent.com/Azure/azure-cli/dev/az.completion -o /root/.oh-my-zsh/custom/az.zsh
  - cp -a /root/.oh-my-zsh /etc/skel/.oh-my-zsh
  - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  - install -o root -g root -m 0755 kubectl /usr/bin/kubectl
  - curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash -s -- -b /usr/local/bin
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
  - unzip -q /tmp/awscliv2.zip -d /tmp
  - /tmp/aws/install
  - rm -rf /tmp/aws /tmp/awscliv2.zip
  - ansible-galaxy collection install fortinet.console fortinet.fortiadc fortinet.fortianalyzer fortinet.fortiflexvm fortinet.fortimanager fortinet.fortios fortinet.fortiswitch fortinet.fortiweb
  - chmod 755 /root/npm-install.sh
  - [ bash, -c, "/root/npm-install.sh" ]
  - mkdir -p /etc/skel/GIT
  - |
    mkdir -p /etc/skel/GIT/.vscode
    cat <<'EOF' > /etc/skel/GIT/.vscode/settings.json
    {
      "dotnetAcquisitionExtension.existingDotnetPath": [
        {
          "extensionId": "MS-CST-E.vscode-devskim",
          "path": "/usr/bin/dotnet"
        },
        {
          "extensionId": "ms-azuretools.vscode-azure-github-copilot",
          "path": "/usr/bin/dotnet"
        }
      ],
      "dotnetAcquisitionExtension.sharedExistingDotnetPath": "/usr/bin/dotnet",
      "files.eol": "\n",
      "terminal.integrated.defaultProfile.linux": "zsh",
      "terminal.integrated.profiles.linux": {
        "bash": {
          "path": "/bin/bash"
        },
        "pwsh": {
          "path": "/opt/microsoft/powershell/7/pwsh"
        },
        "tmux": {
          "path": "/usr/bin/tmux",
          "args": [
            "new-session",
            "-A",
            "-s",
            "vscode:$${workspaceFolder}"
          ]
        },
        "zsh": {
          "path": "/usr/bin/zsh"
        }
      }
    }
    EOF
    cat <<'EOF' > /etc/skel/GIT/.vscode/extensions.json
    {
      "recommendations": [
            "anderson.vscode-extension-paste-image",
            "alexcvzz.vscode-sqlite",
            "amazonwebservices.aws-toolkit-vscode",
            "amazonwebservices.amazon-q-vscode",
            "bmewburn.vscode-intelephense-client",
            "coder.coder-remote",
            "continue.continue",
            "davidAnson.vscode-markdownlint",
            "dbaeumer.vscode-eslint",
            "donjayamanne.githistory",
            "dotjoshjohnson.xml",
            "esbenp.prettier-vscode",
            "github.vscode-github-actions",
            "github.vscode-pull-request-github",
            "gitHub.copilot",
            "gitHub.copilot-chat",
            "golang.go",
            "grapecity.gc-excelviewer",
            "hashicorp.terraform",
            "hediet.vscode-drawio",
            "jeff-hykin.polacode-2019",
            "lacework-security.lacework-code-security",
            "mhutchie.git-graph",
            "ms-azuretools.vscode-azurevirtualmachines",
            "ms-azuretools.vscode-azureresourcegroups",
            "ms-azuretools.vscode-containers",
            "ms-azuretools.vscode-docker",
            "ms-cst-e.vscode-devskim",
            "ms-dotnettools.csdevkit",
            "ms-kubernetes-tools.vscode-aks-tools",
            "ms-kubernetes-tools.vscode-kubernetes-tools",
            "ms-ossdata.vscode-pgsql",
            "ms-playwright.playwright",
            "ms-python.debugpy",
            "ms-python.autopep8",
            "ms-toolsai.jupyter",
            "ms-toolsai.jupyter-keymap",
            "ms-toolsai.vscode-jupyter-powertoys",
            "ms-vscode.azurecli",
            "ms-vscode.live-server",
            "ms-vscode.powershell",
            "ms-vscode.vscode-node-azure-pack",
            "ms-vsliveshare.vsliveshare",
            "msazurermtools.azurerm-vscode-tools",
            "mtxr.sqltools",
            "mtxr.sqltools-driver-pg",
            "nhoizey.gremlins",
            "nitayneeman.puppeteer-snippets",
            "okteto.remote-kubernetes",
            "omartawfik.github-actions-vscode",
            "pomdtr.excalidraw-editor",
            "postman.postman-for-vscode",
            "redhat.ansible",
            "redhat.java",
            "redhat.vscode-yaml",
            "richie5um2.vscode-sort-json",
            "streetsidesoftware.code-spell-checker",
            "timonwong.shellcheck",
            "tomoyukim.vscode-mermaid-editor",
            "vscjava.vscode-gradle",
            "vsls-contrib.codetour",
            "vscjava.vscode-maven",
            "vscjava.vscode-java-debug",
            "vscjava.vscode-java-dependency",
            "vscjava.vscode-java-pack",
            "vscjava.vscode-java-test",
            "visualstudioexptteam.vscodeintellicode",
            "visualstudioexptteam.intellicode-api-usage-examples",
            "weaveworks.vscode-gitops-tools",
            "yzhang.markdown-all-in-one"
      ]
    }
    EOF
  - |
    mkdir -p /etc/skel/GIT/.devcontainer
    cat <<'EOF' > /etc/skel/GIT/.devcontainer/devcontainer.json
    {
      "image": "ghcr.io/amerintlxperts/devcontainer:latest",
      "initializeCommand": "docker pull ghcr.io/amerintlxperts/devcontainer:latest",
      "runArgs": [
        "--hostname=devcontainer"
      ]
    }
    EOF
  - mkdir -p /etc/skel/GIT/fortinet
  - mkdir -p /etc/skel/GIT/40docs
  - mkdir -p /etc/skel/GIT/lacework-dev
  - git clone https://github.com/lacework-dev/scripts.git /etc/skel/GIT/lacework-dev/scripts
  - git clone https://github.com/fortinet/fortigate-terraform-deploy.git /etc/skel/GIT/fortinet/fortigate-terraform-deploy
  - git clone https://github.com/40docs/infrastructure.git /etc/skel/GIT/40docs/infrastructure
  - git clone https://github.com/40docs/docs_forticnapp_code_security.git /etc/skel/GIT/40docs/docs_forticnapp_code_security
  - git clone https://github.com/40docs/manifests-applications.git /etc/skel/GIT/40docs/manifests-applications
  - git clone https://github.com/40docs/hydration.git /etc/skel/GIT/40docs/hydration
  - echo '+nostats +nocomments +nocmd +noquestion +recurse +search' > /root/.digrc && cp /root/.digrc /etc/skel/.digrc
  - curl https://raw.githubusercontent.com/amerintlxperts/dotfiles/refs/heads/main/.p10k.zsh -o /root/.p10k.zsh && cp /root/.p10k.zsh /etc/skel/.p10k.zsh
  - curl https://raw.githubusercontent.com/amerintlxperts/dotfiles/refs/heads/main/.vimrc -o /root/.vimrc && cp /root/.vimrc /etc/skel/.vimrc
  - mkdir -p /root/.vim/pack/plugin/start
  - git clone https://github.com/vim-airline/vim-airline /root/.vim/pack/plugin/start/vim-airline
  - git clone https://github.com/preservim/nerdtree.git /root/.vim/pack/plugin/start/nerdtree
  - git clone https://github.com/junegunn/fzf.vim.git /root/.vim/pack/plugin/start/fzf
  - git clone https://github.com/airblade/vim-gitgutter.git /root/.vim/pack/plugin/start/vim-gitgutter
  - git clone https://github.com/tpope/vim-fugitive.git /root/.vim/pack/plugin/start/vim-fugitive
  - git clone --depth 1 https://github.com/sheerun/vim-polyglot /root/.vim/pack/plugin/start/vim-polyglot
  - git clone https://github.com/hashivim/vim-terraform.git /root/.vim/pack/plugin/start/vim-terraform
  - mkdir -p /root/.vim/pack/themes/start
  - git clone https://github.com/tomasiser/vim-code-dark /root/.vim/pack/themes/start/vim-code-dark
  - cp -a /root/.vim /etc/skel
  - curl -L https://raw.githubusercontent.com/rupa/z/master/z.sh -o /root/.z && cp /root/.z /etc/skel/.z
  - '[ -d /var/lib/docker ] || mkdir -p /var/lib/docker'
  - |
    DEV=/dev/disk/azure/scsi1/lun2
    if ! blkid -s TYPE "$DEV" >/dev/null 2>&1; then
      mkfs.ext4 -F "$DEV"
    fi
  - echo '/dev/disk/azure/scsi1/lun1 /var/lib/authd ext4 defaults,nofail 0 2' >> /etc/fstab
  - 'mountpoint -q /var/lib/docker || mount /dev/disk/azure/scsi1/lun2 /var/lib/docker'
  - 'DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-ce-rootless-extras docker-buildx-plugin'
  - docker pull ghcr.io/amerintlxperts/devcontainer:latest
  - usermod -aG docker ${VAR_admin_username}
  - service apache2 stop
  - systemctl disable apache2
  - export HOME="/root" && curl -fsSL https://coder.com/install.sh | sh -s -- && usermod -aG docker coder && echo 'CODER_HTTP_ADDRESS=0.0.0.0:80' > /etc/coder.d/coder.env && systemctl enable --now coder && journalctl -u coder.service -b && rm -rf "/root/.cache/coder/"
  - |
    #!/bin/sh
    ARCH=$(dpkg-architecture -q DEB_BUILD_ARCH)
    download_url=$(curl --silent "https://api.github.com/repos/jgraph/drawio-desktop/releases/latest" \
      | jq -r --arg ARCH "$ARCH" \
          '.assets[] | select(.name | contains("deb") and contains($ARCH)) | .browser_download_url')
    curl -s -L "$${download_url}" -o /tmp/drawio.deb
    dpkg -i /tmp/drawio.deb
    rm /tmp/drawio.deb
  - curl -Lo ./actionlint.sh https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash
  - chmod 755 actionlint.sh
  - [ bash, -c, "actionlint.sh" ]
  - curl -sSLo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.20.0/terraform-docs-v0.20.0-linux-amd64.tar.gz
  - tar -xzf terraform-docs.tar.gz
  - chmod +x terraform-docs
  - install terraform-docs -D -t /usr/local/bin/
  - curl -Lo terrascan.tar.gz https://github.com/tenable/terrascan/releases/download/v1.19.9/terrascan_1.19.9_Linux_x86_64.tar.gz
  - tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
  - install terrascan /usr/local/bin && rm terrascan
  - |
    LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | \grep -Po '"tag_name": *"v\K[^"]*')
    curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/download/v$${LAZYGIT_VERSION}/lazygit_$${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
    #curl -Lo lazygit.tar.gz https://github.com/jesseduffield/lazygit/releases/download/v0.51.1/lazygit_0.51.1_Linux_x86_64.tar.gz
    tar xf lazygit.tar.gz lazygit
    install lazygit -D -t /usr/local/bin/
  - curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
  - cp /root/.bashrc /etc/skel/.bashrc
  - sed -i "s#^export OSH='/root/\.oh-my-bash'#export OSH=\"\$HOME/.oh-my-bash\"#" /etc/skel/.bashrc
  - curl -Lo kustomize.sh "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
  - chmod 755 kustomize.sh
  - [ bash, -c, "kustomize.sh" ]
  # - curl -L o speedtest.sh curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh
  # - chmod 755 speedtest.sh
  # - [ bash, -c, "speedtest.sh" ]
  # - apt-get install speedtest
  - |
    #!/bin/sh
    export PROVIDER=all
    curl -LO "https://github.com/GoogleCloudPlatform/terraformer/releases/download/$(curl -s https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases/latest | grep tag_name | cut -d '"' -f 4)/terraformer-$${PROVIDER}-linux-amd64"
    chmod +x terraformer-$${PROVIDER}-linux-amd64
    sudo mv terraformer-$${PROVIDER}-linux-amd64 /usr/local/bin/terraformer
  - fwupdmgr update -y --no-reboot-check
  - |
    echo "Checking if reboot is required..."
    if [ -f /var/run/reboot-required ]; then
      echo "Reboot required. Initiating reboot..."
      reboot
    else
      echo "No reboot required."
    fi
