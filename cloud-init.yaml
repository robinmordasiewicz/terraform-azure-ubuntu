#cloud-config

package_update: true
package_upgrade: true

apt:
  sources:
    source1:
      source: 'ppa:ubuntu-enterprise-desktop/authd'
    source2:
      source: 'ppa:ansible/ansible'

packages:
  - authd
  - ansible
  - curl
  - dpkg
  - gnupg
  - lsb-release
  - apt-transport-https
  - ca-certificates
  - bash-completion
  - dos2unix
  - dnsutils
  - file
  - fonts-powerline
  - fzf
  - mtr
  - lsd
  - tcpdump
  - nmap
  - python3-full
  - tofrodos
  - software-properties-common
  - ubuntu-drivers-common
  - yamllint
  - unzip
  - zsh

snap:
  commands:
    - ['install', 'authd-msentraid']

write_files:
  - path: /etc/ssh/sshd_config.d/authd.conf
    content: |
      UsePAM yes
      KbdInteractiveAuthentication yes

runcmd:
  - curl -s https://ohmyposh.dev/install.sh | bash -s -- -d /usr/local/bin -t /usr/local/share/oh-my-posh && curl -L -o /usr/local/share/oh-my-posh/powerlevel10k.omp.json https://raw.githubusercontent.com/amerintxperts/dotfiles/main/powerlevel10k.omp.json && oh-my-posh disable notice
  - mkdir -p "/usr/share/fonts/powerline" && curl -L https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf -o /usr/share/fonts/powerline/PowerlineSymbols.otf && mkdir -p /etc/fonts/conf.avail && curl -L https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf -o /etc/fonts/conf.avail/10-powerline-symbols.conf && fc-cache -f /usr/share/fonts
  - ZSH=/etc/skel/.oh-my-zsh sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended && mv /root/.zshrc /etc/skel/
  - echo 'eval "$(oh-my-posh init zsh --config /etc/skel/.oh-my-posh/themes/powerlevel10k.omp.json)"' >> /etc/skel/.zshrc
  - useradd -D -s "$(which zsh)"
  - sudo sed -i -E 's|^#?DSHELL=.*|DSHELL=/usr/bin/zsh|' /etc/adduser.conf
  - . /etc/os-release && curl -fsSL "https://packages.microsoft.com/config/ubuntu/$VERSION_ID/packages-microsoft-prod.deb" -o /tmp/packages-microsoft-prod.deb
  - [ bash, -lc, "export DEBIAN_FRONTEND=noninteractive APT_LISTCHANGES_FRONTEND=none && dpkg -i /tmp/packages-microsoft-prod.deb" ]
  - rm -f /tmp/packages-microsoft-prod.deb
  - curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor > /usr/share/keyrings/hashicorp-archive-keyring.gpg
  - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" \
    > /etc/apt/sources.list.d/hashicorp.list
  - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
      | gpg --dearmor > /usr/share/keyrings/githubcli-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
      > /etc/apt/sources.list.d/github-cli.list
  - curl -sL https://packages.microsoft.com/keys/microsoft.asc \
      | gpg --dearmor > /usr/share/keyrings/microsoft-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/microsoft-archive-keyring.gpg] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" \
      > /etc/apt/sources.list.d/azure-cli.list
  - curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg \
      | gpg --dearmor > /usr/share/keyrings/google-cloud-archive-keyring.gpg
  - echo "deb [signed-by=/usr/share/keyrings/google-cloud-archive-keyring.gpg] http://packages.cloud.google.com/apt cloud-sdk main" \
      > /etc/apt/sources.list.d/google-cloud-sdk.list
  - curl -fsSL https://dl-ssl.google.com/linux/linux_signing_key.pub \
      | gpg --dearmor > /usr/share/keyrings/google-chrome-archive-keyring.gpg
  - echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-archive-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" \
      > /etc/apt/sources.list.d/google-chrome.list
  - apt-get update
  - apt-get install -y terraform gh azure-cli google-cloud-cli google-chrome-stable powershell
  - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  - install -o root -g root -m 0755 kubectl /usr/bin/kubectl
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
  - unzip -q /tmp/awscliv2.zip -d /tmp
  - /tmp/aws/install
  - rm -rf /tmp/aws /tmp/awscliv2.zip
  - ansible-galaxy collection install fortinet.console fortinet.fortiadc fortinet.fortianalyzer fortinet.fortiflexvm fortinet.fortimanager fortinet.fortios fortinet.fortiswitch fortinet.fortiweb
  - mkfs.ext4 /dev/disk/azure/scsi1/lun0 || true
  - mkfs.ext4 /dev/disk/azure/scsi1/lun1 || true
  - mkdir -p /var/lib/docker
  - mount /dev/disk/azure/scsi1/lun1 /var/lib/docker
  # - echo '/dev/disk/azure/scsi1/lun0 /home ext4 defaults,nofail 0 2' >> /etc/fstab
  - echo '/dev/disk/azure/scsi1/lun1 /var/lib/docker ext4 defaults,nofail 0 2' >> /etc/fstab
  - export NVM_DIR="/usr/bin/nvm" && git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR" && \. "$NVM_DIR/nvm.sh" && nvm install node
  - npm install -g @devcontainers/cli bash-language-server
  - sed -i 's|<CLIENT_ID>|9f2b9fdd-ac54-4611-8b1a-2cf24b656ea2|g; s|<ISSUER_ID>|942b80cd-1b14-42a1-8dcf-4b21dece61ba|g' /var/snap/authd-msentraid/current/broker.conf
  - sudo sed -i 's/^#allowed_users = OWNER$/allowed_users = ALL/' /var/snap/authd-msentraid/current/broker.conf
  - echo 'ssh_allowed_suffixes = @fortinet-us.com' >> /var/snap/authd-msentraid/current/broker.conf
  - sed -i 's/^\(LOGIN_TIMEOUT\t\t\)[0-9]\+/\1360/' /etc/login.defs
  - mkdir -p /etc/authd/brokers.d/
  - cp /snap/authd-msentraid/current/conf/authd/msentraid.conf /etc/authd/brokers.d/msentraid.conf
  - echo "shell = /usr/bin/zsh" >> /etc/authd/brokers.d/msentraid.conf
  - snap restart authd-msentraid
  - systemctl restart authd
  - systemctl restart ssh
  - |
    mkdir -p /etc/skel/.devcontainer
    cat <<'EOF' > /etc/skel/.devcontainer/devcontainer.json
    {
      "image": "ghcr.io/amerintlxperts/devcontainer:latest",
      "initializeCommand": "docker pull ghcr.io/amerintlxperts/devcontainer:latest",
      "runArgs": [
        "--hostname=devcontainer"
      ]
    }
    EOF
  - echo '+nostats +nocomments +nocmd +noquestion +recurse +search' > /etc/skel/.digrc
  - curl https://raw.githubusercontent.com/amerintlxperts/dotfiles/refs/heads/main/.p10k.zsh -o /etc/skel/.p10k.zsh
  - curl https://raw.githubusercontent.com/amerintlxperts/dotfiles/refs/heads/main/.vimrc -o /etc/skel/.vimrc
  - mkdir -p /etc/skel/.oh-my-posh/themes/
  - curl https://raw.githubusercontent.com/amerintlxperts/dotfiles/refs/heads/main/powerlevel10k.omp.json -o /etc/skel/.oh-my-posh/themes/powerlevel10k.omp.json
  - mkdir -p /etc/skel/.vim/pack/plugin/start
  - git clone https://github.com/vim-airline/vim-airline /etc/skel/.vim/pack/plugin/start/vim-airline
  - git clone https://github.com/preservim/nerdtree.git /etc/skel/.vim/pack/plugin/start/nerdtree
  - git clone https://github.com/junegunn/fzf.vim.git /etc/skel/.vim/pack/plugin/start/fzf
  - git clone https://github.com/airblade/vim-gitgutter.git /etc/skel/.vim/pack/plugin/start/vim-gitgutter
  - git clone https://github.com/tpope/vim-fugitive.git /etc/skel/.vim/pack/plugin/start/vim-fugitive
  - git clone --depth 1 https://github.com/sheerun/vim-polyglot /etc/skel/.vim/pack/plugin/start/vim-polyglot
  - git clone https://github.com/hashivim/vim-terraform.git /etc/skel/.vim/pack/plugin/start/vim-terraform
  - mkdir -p /etc/skel/.vim/pack/themes/start
  - git clone https://github.com/tomasiser/vim-code-dark /etc/skel/.vim/pack/themes/start/vim-code-dark
  - curl -L https://raw.githubusercontent.com/rupa/z/master/z.sh -o /etc/skel/.z
  - curl -fsSL https://get.docker.com | sh && usermod -aG docker vscode
  - export HOME="/root" && curl -fsSL https://coder.com/install.sh | sh -s -- && usermod -aG docker coder && echo 'CODER_HTTP_ADDRESS=0.0.0.0:80' > /etc/coder.d/coder.env && systemctl enable --now coder && journalctl -u coder.service -b && rm -rf "/root/.cache/coder/"
  - fwupdmgr update -y --no-reboot-check
  - |
    echo "Checking if reboot is required..."
    if [ -f /var/run/reboot-required ]; then
      echo "Reboot required. Initiating reboot..."
      reboot
    else
      echo "No reboot required."
    fi
